"use strict";(self.webpackChunkhowie_blog=self.webpackChunkhowie_blog||[]).push([[8200],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),d=a,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return t?r.createElement(g,s(s({ref:n},c),{},{components:t})):r.createElement(g,s({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3796:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const o={slug:"spring-boot-project-gitlabci",title:"SpringBoot GitlabCI\u6d41\u6c34\u7ebf\u8bbe\u7f6e",tags:["spring-boot","gitlab-ci"]},s=void 0,i={permalink:"/blog/spring-boot-project-gitlabci",source:"@site/blog/2022-11-11-springboot-project-gitlabci-settings.md",title:"SpringBoot GitlabCI\u6d41\u6c34\u7ebf\u8bbe\u7f6e",description:"\ud83d\ude80 Gitlab FLow",date:"2022-11-11T00:00:00.000Z",formattedDate:"2022\u5e7411\u670811\u65e5",tags:[{label:"spring-boot",permalink:"/blog/tags/spring-boot"},{label:"gitlab-ci",permalink:"/blog/tags/gitlab-ci"}],readingTime:1.92,hasTruncateMarker:!0,authors:[],frontMatter:{slug:"spring-boot-project-gitlabci",title:"SpringBoot GitlabCI\u6d41\u6c34\u7ebf\u8bbe\u7f6e",tags:["spring-boot","gitlab-ci"]},prevItem:{title:"postgresql\u4e0emysql\u5bf9\u6bd4",permalink:"/blog/postgresql-vs-mysql"},nextItem:{title:"Welcome",permalink:"/blog/welcome"}},l={authorsImageUrls:[]},p=[{value:"\ud83d\ude80 Gitlab FLow",id:"-gitlab-flow",level:2},{value:"\ud83d\udc63 Step",id:"-step",level:2},{value:"\u63d0\u4ea4\u4ee3\u7801\u5230MASTER\u5206\u652f",id:"\u63d0\u4ea4\u4ee3\u7801\u5230master\u5206\u652f",level:3},{value:"\u63d0\u4ea4PR\u4eceMaster\u5408\u5e76\u4ee3\u7801\u5230Pre Production(\u9884\u53d1\u5e03 | \u6d4b\u8bd5)",id:"\u63d0\u4ea4pr\u4ecemaster\u5408\u5e76\u4ee3\u7801\u5230pre-production\u9884\u53d1\u5e03--\u6d4b\u8bd5",level:3},{value:"\u63d0\u4ea4PR\u4ecePre Production\u5230Production",id:"\u63d0\u4ea4pr\u4ecepre-production\u5230production",level:3},{value:"\ud83d\ude04 Complete Code",id:"-complete-code",level:2}],c={toc:p};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"-gitlab-flow"},"\ud83d\ude80 Gitlab FLow"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://picbed.howiewant.top/GitlabFLow.png",alt:"GitlabFLow"})),(0,a.kt)("h2",{id:"-step"},"\ud83d\udc63 Step"),(0,a.kt)("h3",{id:"\u63d0\u4ea4\u4ee3\u7801\u5230master\u5206\u652f"},"\u63d0\u4ea4\u4ee3\u7801\u5230MASTER\u5206\u652f"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u89e6\u53d1check job, \u4f7f\u7528sonar\u8fdb\u884c\u4ee3\u7801\u7684\u8d28\u91cf\u68c0\u67e5")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'sonarqube-check:\n  stage: check\n  image: maven:3.8.6-jdk-11\n  variables:\n    SONAR_USER_HOME: "$CI_PROJECT_DIR/.sonar"\n    GIT_DEPTH: "0"\n    MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"\n  cache:\n    key: "$CI_JOB_NAME"\n    paths:\n      - .sonar/cache\n      - .m2/repository\n  script:\n    - cat "$MAVEN_SETTINGS" > /root/.m2/settings.xml\n    - mvn verify sonar:sonar -Dsonar.projectKey=snailmap\n  allow_failure: true\n  only:\n    - master\n')),(0,a.kt)("h3",{id:"\u63d0\u4ea4pr\u4ecemaster\u5408\u5e76\u4ee3\u7801\u5230pre-production\u9884\u53d1\u5e03--\u6d4b\u8bd5"},"\u63d0\u4ea4PR\u4eceMaster\u5408\u5e76\u4ee3\u7801\u5230Pre Production(\u9884\u53d1\u5e03 | \u6d4b\u8bd5)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'build-job:\n  stage: build\n  image: maven:3.8.6-jdk-11\n  variables:\n    MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"\n  cache:\n    key: "$CI_JOB_NAME"\n    paths:\n      - .m2/repository\n  only:\n    - pre-production\n    - production\n  script:\n    - cat "$MAVEN_SETTINGS" > /root/.m2/settings.xml\n    - mvn clean package -DskipTests=true\n  artifacts:\n    paths:\n      - target/*.jar\n  retry: 2\n\n.deploy:\n  stage: deploy\n  image: kroniak/ssh-client\n  before_script: \n    - mkdir -p ~/.ssh\n    - chmod 700 ~/.ssh\n    - echo -e "Host *\\n\\tStrictHostKeyChecking no\\n\\n" > ~/.ssh/config\n    - cat "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa\n    - chmod 600 ~/.ssh/id_rsa\n\n\npre-production-deploy-job:\n  extends: .deploy\n  script:\n    - ssh $PRE_PRODUCTION_HOST "cp /DataDisk/jar/snail-map/snail-map.jar{,.bak}"\n    - scp target/*.jar $PRE_PRODUCTION_HOST:/DataDisk/jar/snail-map/snail-map.jar\n    - echo "$LINDIAOTONG_PASSWD" | ssh -tt $PRE_PRODUCTION_HOST "sudo systemctl restart snailmap"\n  only:\n    - pre-production\n')),(0,a.kt)("h3",{id:"\u63d0\u4ea4pr\u4ecepre-production\u5230production"},"\u63d0\u4ea4PR\u4ecePre Production\u5230Production"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u7c7b\u540cPre Production\u6240\u6267\u884c\u7684job\uff0c\u4ec5\u53d8\u91cf\u6709\u4e9b\u8bb8\u4e0d\u540c")),(0,a.kt)("h2",{id:"-complete-code"},"\ud83d\ude04 Complete Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-.yaml"},'stages:\n  - check\n  - build\n  - deploy\n\nsonarqube-check:\n  stage: check\n  image: maven:3.8.6-jdk-11\n  variables:\n    SONAR_USER_HOME: "$CI_PROJECT_DIR/.sonar"\n    GIT_DEPTH: "0"\n    MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"\n  cache:\n    key: "$CI_JOB_NAME"\n    paths:\n      - .sonar/cache\n      - .m2/repository\n  script:\n    - cat "$MAVEN_SETTINGS" > /root/.m2/settings.xml\n    - mvn verify sonar:sonar -Dsonar.projectKey=snailmap\n  allow_failure: true\n  only:\n    - master\n\n\nbuild-job:\n  stage: build\n  image: maven:3.8.6-jdk-11\n  variables:\n    MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"\n  cache:\n    key: "$CI_JOB_NAME"\n    paths:\n      - .m2/repository\n  only:\n    - pre-production\n    - production\n  script:\n    - cat "$MAVEN_SETTINGS" > /root/.m2/settings.xml\n    - mvn clean package -DskipTests=true\n  artifacts:\n    paths:\n      - target/*.jar\n  retry: 2\n\n.deploy:\n  stage: deploy\n  image: kroniak/ssh-client\n  before_script: \n    - mkdir -p ~/.ssh\n    - chmod 700 ~/.ssh\n    - echo -e "Host *\\n\\tStrictHostKeyChecking no\\n\\n" > ~/.ssh/config\n    - cat "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa\n    - chmod 600 ~/.ssh/id_rsa\n\n\npre-production-deploy-job:\n  extends: .deploy\n  script:\n    - ssh $PRE_PRODUCTION_HOST "cp /DataDisk/jar/snail-map/snail-map.jar{,.bak}"\n    - scp target/*.jar $PRE_PRODUCTION_HOST:/DataDisk/jar/snail-map/snail-map.jar\n    - echo "$LINDIAOTONG_PASSWD" | ssh -tt $PRE_PRODUCTION_HOST "sudo systemctl restart snailmap"\n  only:\n    - pre-production\n\nproduction-deploy-job:\n  extends: .deploy\n  script:\n    - ssh $PRODUCTION_HOST "cp /DataDisk/jar/snail-map/snail-map.jar{,.bak}"\n    - scp target/*.jar $PRODUCTION_HOST:/DataDisk/jar/snail-map/snail-map.jar\n    - echo "$LINWUTONG_PASSWD" | ssh -tt $PRE_PRODUCTION_HOST "sudo systemctl restart snailmap"\n  only:\n    - production\n')))}m.isMDXComponent=!0}}]);